"use strict";angular.module("devfestTodolistApp",["ngResource","ngRoute","ngAnimate","flash"]).config(["$httpProvider",function(a){a.interceptors.push("parseConvertResults"),a.interceptors.push("parseAuthentication")}]).config(["$routeProvider",function(a){a.when("/",{templateUrl:"views/main.html",controller:"MainCtrl",secure:!0}).when("/register",{templateUrl:"views/register.html",controller:"RegisterCtrl"}).when("/signin",{templateUrl:"views/signin.html",controller:"SigninCtrl"}).when("/signout",{templateUrl:"views/signout.html",controller:"SignoutCtrl"}).otherwise({redirectTo:"/"})}]).run(["$q","$rootScope","$location","$http","session",function(a,b,c,d,e){d.get("https://api.parse.com/1/users/me").success(function(a){b.loggedUser=a}),b.$on("$routeChangeStart",function(a,b){var d=e.get("loggedUser");b.secure&&!d&&c.path("/signin")})}]),angular.module("devfestTodolistApp").controller("MainCtrl",["$scope","Todo","session",function(a,b,c){var d=c.get("loggedUser");a.todos=b.query({order:"-createdAt,importance"}),a.addTodo=function(){var c=new b({title:a.newTodo,ACL:{}});c.ACL[d.objectId]={read:!0,write:!0},a.todos.unshift(c),angular.copy(c).$save().then(function(b){a.newTodo=null,angular.extend(c,b)})}}]).controller("TodoCtrl",["$scope",function(a){a.editTodo=function(a){angular.copy(a).$update(function(){a.$editing=!1})},a.removeTodo=function(b){var c=a.todos.indexOf(b);a.todos.splice(c,1),b.$remove()}}]),angular.module("devfestTodolistApp").factory("Todo",["$resource",function(a){return a("https://api.parse.com/1/classes/Todo/:id",{id:"@objectId"},{update:{method:"PUT"}})}]),angular.module("devfestTodolistApp").factory("parseConvertResults",["$q",function(a){return{response:function(b){return b.config.url.match(/parse/)&&"results"in b.data&&(b.data=b.data.results),b||a.when(b)}}}]),angular.module("devfestTodolistApp").factory("parseAuthentication",["$q","session",function(a,b){return{request:function(c){if(c.url.match(/parse/)){c.headers["X-Parse-Application-Id"]="Sin7UAAvHjStqKOidhpyIuhDtxzHbbYldNeYy3Hv",c.headers["X-Parse-REST-API-Key"]="mSvr3tdqH0pVjKjA5JLgW4yuWvELzqPAGk8oneVx";var d=b.get("loggedUser");d&&(c.headers["X-Parse-Session-Token"]=d.sessionToken)}return c||a.when(c)}}}]),angular.module("devfestTodolistApp").controller("RegisterCtrl",["$scope","$http","$location","flash",function(a,b,c,d){a.registerError="",a.registerUser=function(){b.post("https://api.parse.com/1/users",a.user).success(function(){d("success","Usuário registrado com sucesso"),c.path("/signin")}).catch(function(b){202===b.data.code&&(a.registerError="Nome de usuário já utilizado")})}}]),angular.module("devfestTodolistApp").factory("session",function(){return{get:function(a){return JSON.parse(localStorage.getItem(a))},set:function(a,b){return b=JSON.stringify(b),localStorage.setItem(a,b),this.get(a)},remove:function(a){localStorage.removeItem(a)}}}),angular.module("devfestTodolistApp").controller("SigninCtrl",["$scope","$rootScope","$http","$location","session",function(a,b,c,d,e){a.signinUser=function(){c.get("https://api.parse.com/1/login",{params:a.user}).success(function(a){e.set("loggedUser",a),c.get("https://api.parse.com/1/users/me").success(function(a){b.loggedUser=a,d.path("/")})}).catch(function(b){101===b.data.code&&(a.signinError=!0)})}}]),angular.module("devfestTodolistApp").controller("SignoutCtrl",["$scope","$location","session",function(a,b,c){c.remove("loggedUser"),b.path("/signin")}]);